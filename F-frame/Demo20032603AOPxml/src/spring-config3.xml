<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    <context:component-scan base-package="com.codefool0307">
    </context:component-scan>
    <!--将目标类和切面类加入到ioc容器中-->
    <!--  基于配置的AOP-->
    <bean id="myMathCalculator" class="com.codefool0307.impl.MyCalculator"></bean>
    <bean id="logUtils" class="com.codefool0307.utils.LogUtils"></bean>
    <!-- 需要AOP名称空间 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.codefool0307.impl.*(..))" id="globalPoint"/>

        <!-- 普通前置  ===== 目标方法  =====(环绕执行后置/返回)====s普通后置====普通返回    -->
        <!-- 指定切面：@Aspect -->
        <aop:aspect ref="logUtils" order="1">
            <!-- 配置哪个方法是前置通知；method指定方法名
            logStart@Before("切入点表达式")
            -->
            <!-- 当前切面能用的 -->
            <aop:around method="myAround" pointcut-ref="mypoint"/>
            <aop:pointcut expression="execution(* com.atguigu.impl.*.*(..))" id="mypoint"/>
            <aop:before method="logStart" pointcut="execution(* com.atguigu.impl.*.*(..))"/>
            <aop:after-returning method="logReturn" pointcut-ref="mypoint" returning="result"/>
            <aop:after-throwing method="logException" pointcut-ref="mypoint" throwing="exception"/>
            <aop:after method="logEnd" pointcut-ref="mypoint"/>
        </aop:aspect>
</beans>